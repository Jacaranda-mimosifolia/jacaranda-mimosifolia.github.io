{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Tmux 常用命令","text":"Session123456789101112131415161718192021# 创建tmux 创建默认会话tmux new -s &lt;name&gt; 创建命名会话Ctrl + b, : new-session -s &lt;name&gt; 会话中创建新会话# 查看tmux ls 列出所有会话# 改名tmux rename-session -t &lt;old-name&gt; &lt;new-name&gt; 修改会话名称# 连接tmux attach-session -t &lt;name&gt; 指定名称连接# 分离Ctrl + b, d 分离退出会话# 终止tmux kill-session 终止当前会话tmux kill-session -t &lt;name&gt; 指定名称终止tmux kill-server 终止所有会话 Window1234567891011121314151617181920212223# 创建Ctrl + b, c 创建默认窗口# 查看tmux list-windows 列出所有窗口# 改名Ctrl + b, , 修改窗口名称Ctrl + b, :rename-pane &lt;name&gt; 修改窗口名称# 切换Ctrl + b, n 切换下个窗口Ctrl + b, p 切换上个窗口Ctrl + b, &lt;number&gt; 指定切换窗口Ctrl + b, w 选择切换窗口# 清空Ctrl + l 清空当前窗口# 结束Ctrl + d/exit 结束当前窗口,该窗口切换为后台运行,若是会话中唯一窗口，则终止会话Ctrl + b, ? 查看帮助文档 pane123456789101112131415161718192021222324# 分割Ctrl + b, % 水平分割当前窗口，分割成上下两个窗格Ctrl + b, &quot; 垂直分割当前窗口，分割成左右两个窗格# 切换Ctrl + b, o 切换下个窗格Ctrl + b, &lt;direction&gt; 方向键切窗格Ctrl + b, space 调整窗格布局Ctrl + b, x 关闭当前窗格# 位置Ctrl + b, :resize-pane -U 增加上方空间Ctrl + b, :resize-pane -D 增加下方空间Ctrl + b, :resize-pane -L 增加左方空间Ctrl + b, :resize-pane -R 增加右方空间# 换位Ctrl + b, :swap-pane -s &lt;number&gt; -t &lt;number&gt; 互换窗格位置Ctrl + b, &#123; 互换上个窗格Ctrl + b, &#125; 互换下个窗格# 同步所有面板的输入Ctrl + b, :setw synchronize-panes on 启用Ctrl + b, :setw synchronize-panes off 关闭","path":"2024/12/25/Tmux-常用命令/","date":"12-25","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Docker 部署 Oracle","text":"一、Oracle Install1. 创建 oracle 容器123456789101112131415161718192021222324# 镜像网址https://hub.docker.com/r/datagrip/oracle# 拉取 oracle 镜像docker pull datagrip/oracle:19.3-se# 创建 oracle 容器# -m 分配容器6g运行内存# -c 分配容器4c运行线程# -v 挂载了三个主要目录# -p 配置了两个端口映射# -e 配置SID、DATABASE、PWD、CHARACTERSETdocker run -d --name oracle \\ -m 6g \\ -c 4 \\ -v oracle_etc:/etc/ \\ -v oracle_home:/home/ \\ -v oracle_opt:/opt/ \\ -p 1521:1521 \\ -p 5500:5500 \\ -e ORACLE_SID=ORCL \\ -e ORACLE_PWD=123456 \\ -e ORACLE_DATABASE=ORCL \\ datagrip/oracle:19.3-se 2. 创建 Oracle 用户12345678910111213141516171819202122# 进入 oracle 容器docker exec -it oracle bash# 管理员登录sqlplus / as sysdba# 创建通用用户CREATE USER C##chen IDENTIFIED BY 123456;GRANT DBA TO C##chen;# 解除用户锁ALTER USER C##chen ACCOUNT UNLOCK;# 修改 sys system 密码ALTER USER SYS IDENTIFIED BY 123456;ALTER USER SYSTEM IDENTIFIED BY 123456;# 设置密码永不过期ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;# 测试登录sqlplus C##chen/123456@//127.0.0.1:1521/ 3. 配置环境变量123456789export ORACLE_SID=ORCLexport ORACLE_BASE=/var/lib/docker/volumes/oracle_opt/_data/oracleexport ORACLE_HOME=$ORACLE_BASE/product/19c/dbhome_1export PATH=$PATH:$ORACLE_HOME/binecho $ORACLE_SIDecho $ORACLE_BASEecho $ORACLE_HOMEecho $PATH 4. 配置防火墙12sudo iptables -A INPUT -p tcp --dport 1521 -j ACCEPTsudo iptables -A INPUT -p tcp --dport 5500 -j ACCEPT 二、 Client Install1. Client Home12345678client_home是完整的客户端，拥有所有 oracle 开发、监听、连接服务但此处我用的是docker管理oracle容器，client_home实在太笨重了，且需要安装到oracle指定目录，因此不选择# 下载网址，这里选择 LINUX.X64_193000_client_home.zip 941.7 MBhttps://www.oracle.com/cn/database/technologies/oracle19c-linux-downloads.html# 解压到 ubuntu-24.04unzip /mnt/c/Users/35422/Downloads/LINUX.X64_193000_client_home.zip -d /home/oracle/oracle_client 2. Instant Client1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253Instant_Client是轻量型客户端，拥有基本的 oracle 监听、连接服务* basic 安装包具备oracle基本开发、监控功能* sqlplus 工具包具备sqlplus连接工具，可用来连接oracle数据库，提供脚本管理、数据库管理# 下载网址：这里选择 Version 19.23.0.0.0 (Requires glibc 2.14)https://www.oracle.com/cn/database/technologies/instant-client/linux-x86-64-downloads.html# 需要下载basic和sqlplus并解压到同一个文件夹中unzip /mnt/e/Download/DownLoad/instantclient-basic-linux.x64-19.23.0.0.0dbru.zip -d /home/oracle/oracle_clientunzip /mnt/e/Download/DownLoad/instantclient-sqlplus-linux.x64-19.23.0.0.0dbru.zip -d /home/oracle/oracle_client# 配置环境变量export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/oracle/oracle_client/instantclient_19_23export PATH=$PATH:/home/oracle/oracle_client/instantclient_19_23# 运行安装文件/home/oracle/oracle_client/instantclient_19_23/.sqlplus# 注意缺少依赖报错sqlplus: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory# 查看 ./sqlplus缺少哪些依赖ldd /home/oracle/oracle_client/instantclient_19_23/sqlpluslinux-vdso.so.1 (0x00007ffddc3b3000) libsqlplus.so =&gt; /home/oracle_client/instantclient_19_23/libsqlplus.so (0x00007f0c67c00000) libclntsh.so.19.1 =&gt; /home/oracle_client/instantclient_19_23/libclntsh.so.19.1 (0x00007f0c63800000) libclntshcore.so.19.1 =&gt; /home/oracle_client/instantclient_19_23/libclntshcore.so.19.1 (0x00007f0c63200000) libnnz19.so =&gt; /home/oracle_client/instantclient_19_23/libnnz19.so (0x00007f0c62a00000) libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f0c67f7d000) libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f0c63117000) libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f0c67f76000) libnsl.so.1 =&gt; /lib/x86_64-linux-gnu/libnsl.so.1 (0x00007f0c67f5a000) librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f0c67f55000) libaio.so.1 =&gt; not found libresolv.so.2 =&gt; /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f0c67f42000) libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f0c627ee000) /lib64/ld-linux-x86-64.so.2 (0x00007f0c67f8a000) libaio.so.1 =&gt; not found libaio.so.1 =&gt; not found libaio.so.1 =&gt; not found# 安装 libaio1t64，注意在 ubuntu-24.04 中，libaio 改名成了 libaio1t64apt-get install libaio1t64# 创建符号链接ln -s /usr/lib/x86_64-linux-gnu/libaio.so.1t64 /usr/lib/x86_64-linux-gnu/libaio.so.1# 测试连接sqlplus C##chen/123456@//127.0.0.1:1521/ORCLCDB# sql*plus快速入门：https://docs.oracle.com/cd/B14117_01/server.101/b12170/qstart.htm 3. Oracle Enterprise Manager12345678Oracle Enterprise Manager 企业管理器，简称OEM，提供友好的GUI，具备监管、查看、修改功能# 下载网址，这里选择 Oracle Database 19c Examples (19.3) for Linux x86-64https://www.oracle.com/cn/database/technologies/oracle19c-linux-downloads.html# 解压到linuxunzip /mnt/e/Download/DownLoad/LINUX.X64_193000_examples.zip -d /home/oracle/oem# 运行安装文件，且需要运行linux访问弹窗，任何要在弹窗中执行安装步骤，反正我是卡在第一步，死活找不到在oracle中指定的安装路径 4. Oracle Machine Learning1Oracle Machine Learning 机器学习工具，检查OML，提供GUI、集成机器学习模型 三、Oracle Config1. Oracle Network12345678910111213141516171819202122232425网络配置：https://docs.oracle.com/en/database/oracle/oracle-database/19/netrf/index.html#GUID-9988A30D-7D01-426B-9735-17EC2F0B4A85# 常用语法lsnrctl start 启动lsnrctl stop 停止lsnrctl reload 重载lsnrctl status 状态lsnrctl version 版本lsnrctl services 服务# 编辑 listener.oravim $ORACLE_HOME/network/admin/listener.ora# 此处存在软连接 listener.oravim /var/lib/docker/volumes/oracle_opt/_data/oracle/oradata/dbconfig/ORCL/listener.ora# 配置 LD_LIBRARY_PATH 使得lib导向了 oracle 的lib非常严重影响 linux 环境export LD_LIBRARY_PATH=$ORACLE_HOME/liblsnrctl reloadexport LD_LIBRARY_PATH=# 插个眼，lsnrctl启用时，会占用docker oracle 1521端口，待处理# oracle用户无运行oracle容器权限# 修改权限出现问题，就连root都无法运行容器了 四、Oracle Uninstall1.1234567891011121314# 停止容器docker stop oracle# 删除容器docker rm oracle# 删除挂载docker volume rm oracle_homedocker volume rm oracle_etcdocker volume rm oracle_opt# 查看docker ps -adocker volume ls","path":"2024/12/12/Docker-部署-Oracle/","date":"12-12","excerpt":"","tags":[{"name":"<Docker>","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"<Oracle>","slug":"Oracle","permalink":"http://example.com/tags/Oracle/"}]},{"title":"Docker 部署 Mysql","text":"Mysql 远程连接： 配置 WSL2 镜像网络 配置 .wslconfig，物理机中的 WSL 配文件：autoMemoryReclaim&#x3D;disabled 配置 daemon.json，WSL 中的守护进程：”iptables”:false 配置 Mysql 端口映射，以防与本地 Mysql 端口冲突 配置 Mysql 容器端口，绑定 0.0.0.0 创建 Mysql 远程连接用户 配置 WSL2 防火墙，允许 Mysql 端口通过 测试远程连接 其他问题 1. 创建 mysql 容器123456789101112131415# 拉取 mysql 镜像docker pull mysql:8.0.36# 创建 mysql 容器# 挂载 etc 目录# 配置 3307:3306 端口映射# 配置 root 密码 123456docker run -d --name mysql \\ -v mysql_etc:/etc/ \\ -p 3307:3306 \\ -e MYSQL_ROOT_PASSWORD=123456 \\ mysql:8.0.36 # 配置防火墙，我用的是 iptables，各位修改自己对应的防火墙即可iptables -A INPUT -p tcp --dport 3307 -j ACCEPT 2. 绑定内循环端口12345678910# 此处我是使用 WSL，如果是远程服务器，需要绑定对应的服务器IP# 获取挂载路径docker volume inspect mysql_etc# 修改 my.cnf 配置文件vim /var/lib/docker/volumes/mysql_etc/_data/my.cnf[mysqld]bind-address=0.0.0.0 3. 创建远程连接用户1234567891011121314# 进入 mysql 容器docker exec -it mysql bash# 连接 root 登录mysql -u root -p# 创建远程连接用户CREATE USER &#x27;chen&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;GRANT ALL PRIVILEGES ON *.* TO &#x27;chen&#x27;@&#x27;%&#x27; WITH GRANT OPTION;FLUSH PRIVILEGES;# 查看用户use mysqlselect * from user where user=&#x27;chen&#x27; \\G; 4. 测试远程连接123# 重启wsl-&gt;启动docker-&gt;运行mysql容器# 实例：mysql -h 198.18.0.1 -P 3307 -u chen -pmysql -h &lt;IP&gt; -P &lt;Port&gt; -u &lt;UserName&gt; -p 5. 其他问题服务端与客户端版本不匹配 ERROR 2007 (HY000): Protocol mismatch; server version &#x3D; 11, client version &#x3D; 10 遇到情况 要么本地安装对应版本的 Mysql Client，要么 docker 拉取对应版本的 mysql 镜像","path":"2024/12/02/Docker-部署-Mysql/","date":"12-02","excerpt":"","tags":[{"name":"<Docker>","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"<Mysql>","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"}]},{"title":"Docker 常用命令","text":"一、Docker常用指令1. Docker 镜像操作123docker images 查看镜像docker pull image_name 拉取镜像docker rmi image_name 删除镜像 2. Docker 容器操作123456docker start container_name 启动容器docker stop container_name 停止容器docker restart container_name 重启容器docker rm container_name 删除容器docker ps 查看运行容器docker ps -a 查看所有容器 3. Docker 构建和运行容器build -t image_name```&emsp;&emsp;&emsp;&emsp;dockerfile 构建镜像1 docker run -d –name mysql -v mysql_dir:&#x2F;etc&#x2F; -p 3307:3307 -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql:8.0.36 选项： -d 后台运行 –name 容器名 -v &#x2F;local_path&#x2F; or colume_name:contant_path 文件挂载，可以选择自定义挂在路径，也可以选择默认挂在路径 -p local_port:contant_port 端口映射 -e 环境变量 image_name 123### 4. Docker 容器日志和状态 docker logs container_name 查看容器日志docker inspect container_name 查看容器状态docker exec -it bash 进入容器bash 123### 5. Docker 数据卷与数据备份 docker volume ls 列出所有数据卷docker volume inspect volume_name 查看数据卷详情docker volume rm volume_name 删除数据卷docker volume prune 清理匿名卷，谨慎使用docker volume create volume_name 创建数据卷，不经常用 –mount type&#x3D;volume,source&#x3D;volume_name,target&#x3D;contant_path 使用–mount在创建容器时，指定已创建数据卷挂载 docker cp source_path destination_path 拷贝数据 source_path: container_id:container_path 或者 &#x2F;local&#x2F;path&#x2F; destination_path: container_id:container_path 或者 &#x2F;local&#x2F;path&#x2F; 123### 6. Docker 容器网络 docker network ls 列出所有网络docker network prune 清理未用网络docker network create network_name 创建网络docker network rm network_name 删除网络docker network inspect network_name 查看详情docker network connect network_name container_name 添加容器到网络docker network disconnect network_name container_name 网络中删除容器 123### 7. Docker 其他命令 systemctl start docker 启动systemctl stop docker.socket 关闭systemctl restart docker 重启systemctl enable docker 开机自启docker info 查看配置信息","path":"2024/11/24/Docker-常用命令/","date":"11-24","excerpt":"","tags":[{"name":"<Docker>","slug":"Docker","permalink":"http://example.com/tags/Docker/"}]},{"title":"Docker 安装配置","text":"一、Docker Install1. 卸载旧版本123456789# 卸载 Docker 依赖项:for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done# 卸载 Docker Engine:sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras# 删除 Docker 文件夹：sudo rm -rf /var/lib/dockersudo rm -rf /var/lib/containerd 2. 安装 apt 存储库123456789101112131415# Add Docker&#x27;s official GPG key:sudo apt-get updatesudo apt-get install ca-certificates curlsudo install -m 0755 -d /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.ascsudo chmod a+r /etc/apt/keyrings/docker.asc# Add the repository to Apt sources:echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null sudo apt-get updatesudo docker --version 二、 Docker Config1. 配置远程连接123456789101112# 修改 docker.service 文件vim /usr/lib/systemd/system/docker.service# 绑定docker地址 -H tcp://0.0.0.0:2375ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375# 配置防火墙允许2375端口通过sudo iptables -A INPUT -p tcp --dport 2375 -j ACCEPT# 重启 dockersystemctl daemon-reloadsystemctl restart docker 12345# 本地远程连接http://127.0.0.1:2375/version# Pycharm远程连接设置-&gt;构建、执行、部署-&gt;TCP 套接字-&gt;引擎 APL URL-&gt;tcp://127.0.0.1:2375 2. 配置守护进程1234567891011121314# 修改 daemon.json 文件vim /etc/docker/daemon.json# 关闭自动规则管理&#123; &quot;iptables&quot;:false &#125;# 重启 dockersystemctl daemon-reloadsystemctl restart docker# 注意：倘若配置出错，不会修改，可以重置守护进程# 删除daemon.json，并重启docker，docker检查不到守护进程时，重新创建守护进程(注意保留自定义配置)","path":"2024/11/20/Docker-安装配置/","date":"11-20","excerpt":"","tags":[{"name":"<Docker>","slug":"Docker","permalink":"http://example.com/tags/Docker/"}]},{"title":"Linux 云服务器","text":"1. 远程连接服务器1234567891011# ssh密钥连接ssh -i /path/to/.pem username@remote_host# 本地生成公钥和密钥，公钥推送到服务器# 请看远程连接-&gt;Linux 远程连接# 配置虚拟局域网访问linux# 请看远程连接-&gt;Zerotier+Moonlight+Parsec远程连接# 主机配置虚拟机端口映射# 请看远程连接-&gt;FRP内网穿透 2. 文件拉取与推送1234567891011121314# 拉取服务器文件到本地：scp username@remote_host:/path/to/remote/file /path/to/local/directorytest:scp ubuntu@&lt;IP&gt;:/var/lib/zerotier-one/moon.d/00000015efc603c7.moon D:\\00000015efc603c7.moonubuntu@&lt;IP&gt;&#x27;s password:00000015efc603c7.moon 100% 259 1.2KB/s 00:00# 推送本地文件到服务器：scp /path/to/local/file username@remote_host:/path/to/remote/directorytest:# 需要注意linux文件权限scp D:\\00000015efc603c7.moon ubuntu@&lt;IP&gt;:/var/lib/zerotier-one/00000015efc603c7.moon","path":"2024/11/16/Linux-云服务器/","date":"11-16","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux 远程连接","text":"1. 配置 sshd_config12345678910# 编辑 sshd_configvim /etc/ssh/sshd_config# 注意ubuntu24 RSAAuthentication yes 默认开启，不需要手动添加RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys# 配置防火墙，ssh默认端口22sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT 2. root 远程连接1234567# /root/.ssh目录下，生成私钥 id_rsa 和公钥 id_rsa.pubssh-keygen -t rsa# 将公钥添加到 authorized_keyscat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys# 将服务器root公钥 2. user 远程连接123456789101112# /home/user/.ssh目录下，生成私钥 id_rsa 和公钥 id_rsa.pubssh-keygen -t rsa# 将公钥添加到 authorized_keyscat /home/user/.ssh/id_rsa.pub &gt;&gt; /home/user/.ssh/authorized_keys# 将服务器的用户公钥添加到本地scp ssh username@remote_host cat /home/username/.ssh/id_rsa.pub &gt;&gt; /home/loacl_user/.ssh/authorized_keys# 修改文件权限chmod 700 /home/user/.sshchmod 600 /home/user/.ssh/authorized_keys 3. systemctl命令123sudo systemctl start ssh # 启用sudo systemctl status ssh # 查看状态sudo systemctl enable ssh # 是否可用","path":"2024/11/12/Linux-远程连接/","date":"11-12","excerpt":"","tags":[{"name":"<远程连接>","slug":"远程连接","permalink":"http://example.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"},{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux 环境变量","text":"全局环境变量 非登录Shell /etc/bash.bashrc 登录Shell /etc/profile，以及脚本配置文件目录 /etc/profile. 简单的环境变量设置 /etc/environment，不支持shell语言，适用于非登录和登录Shell 用户环境变量 非登录Shell ~/.bashrc 登录Shell ~/.profile 这里我用的是WSL，在本地登录时配置的是：~/.bashrc，使用SSH登录时配置的是 ~/.profile 配置临时环境变量 export MY_VAR&#x3D;”your_value”","path":"2024/11/08/Linux-环境变量/","date":"11-08","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux 文件权限","text":"ls -l 查看文件权限： 123456789101112131415161718192021222324252627例子： drwxr-x--- 7 chen chen 4096 Oct 9 07:33 chen drwxr-x---：表示权限。d表示这是一个目录，接下来的字符表示所有者、组和其他用户的权限： rwx：所有者（chen）拥有读、写和执行权限。 r-x：组（chen）拥有读和执行权限，但没有写权限。 ---：其他用户没有任何权限。 7：表示硬链接的数量。 chen：表示所有者的用户名。 chen：表示组的名称。 4096：表示目录的大小（以字节为单位）。 Oct 9 07:33：表示最后修改时间。 chen：表示目录的名称。第一个字符： - 表示普通文件 d 表示目录 l 表示符号链接 c 表示字符设备文件 b 表示块设备文件 s 表示套接字文件 p 表示管道文件前三个字符表示所有者的权限，中间三个字符表示所属组的权限，后三个字符表示其他用户的权限： r 表示读取权限 w 表示写入权限 x 表示执行权限 - 表示没有对应权限 权限转数字： 12345678910111213141516171819202122232425262728r可读，w写入，x操作，-无权限，r=4，w=2，x=1，-=0完美的诠释所有组合，共七种： rwx = 4 + 2 + 1 = 7 rw = 4 + 2 = 6 rx = 4 + 1 = 5 r = 4 wx = 2 + 1 = 3 w = 2 x = 1例如： -rw------- (600) 只有拥有者有读写权限。 -rw-r--r-- (644) 只有拥有者有读写权限；而属组用户和其他用户只有读权限。 -rwx------ (700) 只有拥有者有读、写、执行权限。 -rwxr-xr-x (755) 拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 -rwx--x--x (711) 拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。 -rw-rw-rw- (666) 所有用户都有文件读、写权限。 -rwxrwxrwx (777) 所有用户都有读、写、执行权限。 rwx = 111 = 7 rw- = 110 = 6 r-x = 101 = 5 r-- = 100 = 4 -wx = 011 = 3 -w- = 010 = 2 --x = 001 = 1 --- = 000 = 0 chmod基本操作： 修改文件权限： 1234567891011121314151617181920212223chmod 权限 文件名符号： r：读权限 w：写权限 x：执行权限 u：文件所有者 g：文件组 o：其他用户 a：所有用户（默认） 如： 给所有者添加执行权限： chmod u+x 文件名 移除组的写权限： chmod g-w 文件名 具体修改： chmod rwxr-xr-- 文件名 chmod 754 文件名-R 递归修改文件权限 chmod -R 755 /path/to/directory 修改文件拥有者&#x2F;组： 123chown newuser 文件名 修改拥有者chown newuser:newgroup 文件名 修改拥有者和组sudo chown -R newuser:newgroup 文件路径 递归修改","path":"2024/11/04/Linux-文件权限/","date":"11-04","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux 用户管理","text":"Linux系统的用户和用户组管理： https://www.cnblogs.com/zhongguiyao/p/9165917.html 一、用户、角色、用户组 用户：用户是指可以访问系统资源的个体或实体。UID是用户的唯一标识 角色：角色是特定的权限集合。Ubuntu没有内置的角色管理系统，需要安装额外的安全模块 用户组：用户组是将多个用户组织在一起的集合，用于简化权限管理。GID是用户组的唯一标识1234用户UID划分：超级用户（0）root程序用户（1~499）普通用户（500~65535） 12345用户和用户组的关系：一对一：即一个用户可以存在一个组中，也可以是组中的唯一成员 root。一对多：即一个用户可以存在多个组中，这个用户就具有这些组所有权限。多对一：即多个用户可以存在一个组中，这些用户具有这个组的共享权限。多对多：即多用户可以存在于多个组中。并且几个用户可以归属相同的组。 二、账户管理文件 用户管理文件：&#x2F;etc&#x2F;passwd、&#x2F;etc&#x2F;shadow 用户组管理文件：&#x2F;etc&#x2F;group、&#x2F;etc&#x2F;gshadow 1.查看指令信息 查看说明文档：man useradd 查看参数命令：useradd --help 2.查看 &#x2F;etc&#x2F;passwd 查看 &#x2F;etc&#x2F;passwd 中前五条用户的记录： 12head -5 /etc/passwdsync:x:4:65534:sync:/bin:/bin/sync，其中UID:4, GID:65534 查看 &#x2F;etc&#x2F;passwd 中指定用户的记录： 12cat /etc/passwd | grep username # cat+grep筛选用户信息finger username # finger指令 三、用户基本操作1234567891011useradd username 创建用户, -m -d /home/username,指定家目录,并生成用户配置deluser username 删除用户usermod username 修改属性passwd username 修改密码id username 查看信息su username 切换用户 如果切换后是 $，请输入 bash 切换成 bash 状态newgrp docker 重新登录usermod -aG groupname username 将用户添加到组usermod -l newuser olduser 修改用户名usermod -g newgroup groupname 修改用户的主组，有所属用户的主组不可被删除usermod -d /home/new username 修改用户根目录，主要转移备份，修改文件夹权限 四、用户组基本操作123456groupadd groupname 创建组groupdel groupname 删除组groupmod -n newname oldname 重命名groups username 查看用户所属组getent group groupname 查看用户组用户gpasswd -d username groupname 从组中删除用户 123sudo 允许成员使用 sudo 命令以超级用户身份执行命令plugdev 允许访问可移动设备的组adm 允许访问系统日志文件的组 1234# 删除用户时，提示该用户进程使用中# 查看用户进程，强行终止进程ps -u mysqlkill -9 816","path":"2024/11/03/Linux-用户管理/","date":"11-03","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Apt 常用命令","text":"apt 包管理123456789101112apt update 更新aptapt upgrade 更新包apt install package_name 下载包apt remove package_name 删除包apt purge package_name 删除包和配置文件apt autoremove 清理未使用的包apt list --installed 查看所有包apt search keyword 查找包apt show package_name 查看包信息apt depends package_name 查看包依赖dpkg-reconfigure package_name 重置包apt-cache search package_name 查找相关包","path":"2024/10/22/Apt-常用命令/","date":"10-22","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Tar 常用命令","text":"tar 文件归档和压缩的命令行工具1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859601. 创建归档文件 -c: 创建一个新的归档文件。 -f: 指定归档文件的名称（必须与 -c 一起使用）tar -cf archive.tar /path/to/directory2. 解压归档文件 -x: 解开归档文件。 -f: 指定要解开的归档文件。tar -xf archive.tar3. 列出归档内容 -t: 列出归档文件的内容。 -f: 指定归档文件。tar -tf archive.tar4. 压缩归档文件常用的压缩选项： -z: 使用 gzip 压缩。 -j: 使用 bzip2 压缩。 -J: 使用 xz 压缩。例如，创建一个使用 gzip 压缩的归档：tar -czf archive.tar.gz /path/to/directory5. 解压缩归档文件对应的解压选项： 对于 gzip：tar -xzf archive.tar.gz 对于 bzip2：tar -xjf archive.tar.bz2 对于 xz：tar -xJf archive.tar.xz6. 追加文件到归档 -r: 将文件追加到现有归档文件中（仅适用于未压缩的归档）tar -rf archive.tar newfile.txt7. 删除归档中的文件 --delete: 从归档中删除指定文件（仅适用于未压缩的归档）tar --delete -f archive.tar file.txt8. 其他常用选项 -v: 显示详细的操作过程（verbose）。 -C: 切换到指定目录后再执行操作。例如，解压到指定目录：tar -xf archive.tar -C /path/to/directory创建压缩归档：tar -czf archive.tar.gz /path/to/directory解压归档：tar -xzf archive.tar.gz列出归档内容：tar -tf archive.tar.gz追加文件：tar -rf archive.tar newfile.txt删除文件：tar --delete -f archive.tar file.txt","path":"2024/10/21/Tar-常用命令/","date":"10-21","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Vim 常用命令","text":"Vim 文件编辑器1.Vim 模式切换123456Vim 有三种模式，分别是命令模式，输入模式和编辑模式模式切换： 命令-&gt;输入：a、i、o 输入-&gt;命令：Ese 命令-&gt;编辑：: 编辑-&gt;命令：执行命令后自动返回 2. Vim 编辑模式1234567:wq 保存、退出:wq! 保存、强制退出:q 不保存、退出:q! 不保存、强制退出:w 保存、不退出:w! 强制保存、不退出:w /path/file_name 另存为 3.Vim 文本删除123dd 删除行ndd 删除后n行dG 删除到末尾","path":"2024/10/19/Vim-常用命令/","date":"10-19","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux 常用命令","text":"1.切换123456cd ~ 回到家目录,指用户目录,一般为/home/usercd / 回到根目录,指系统目录,/cd /path/ 切换目录cd dir_name 进入下一级cd .. 返回上一级cd - 切换上次目录 2. 查看1234567ls -a 查看隐藏ls -l 查看详细ls -h 查看大小ls -S 大小排序ls -t 时间排序ls -R 递归查看ls -d 查看自身 3. 创建12mkdir dir_name 相对路径mkdir /path/ 绝对路径 4. 删除123rm -f dir_name 删除空白目录rm -r file_name 递归删除文件rm -rf dir_name 递归删除目录 5. 移动1234mv old_path new_path 移动/重命名mv -i old_path new_path 覆盖提醒mv -v old_path new_path 显示信息mv -f old_path new_path 强制移动 6. 拷贝1234cp old_path new_path 复制cp -i old_path new_path 覆盖提醒cp -v old_path new_path 显示信息cp -f old_path new_path 强制复制","path":"2024/10/18/Linux-常用命令/","date":"10-18","excerpt":"","tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"WSL Command","text":"1. 查看分发版1234wsl -l 查看本地分发版wsl -l -o 查看安装分发版wsl -l -v 查看版本分发版wsl -l --running 查看运行分发版 2. 分发版操作123wsl --install -d Distr_Name 安装指定分发版wsl --unregister Distr_Name 卸载指定分发版wsl --terminate Distr_Name 停止指定分发版 2. 运行分发版1234wsl -s Distr_Name 设置默认分发版wsl 启用默认分发版wsl -d Distr_Name 指定启动分发版wsl -u User_Name 指定用户的登陆 3. WSL操作12345wsl --shutdown 关机wsl --status 内核状态wsl --update 更新内核wsl --uninstall 删除内核wsl --update --rollback 回滚内核","path":"2024/10/08/WSL-Command/","date":"10-08","excerpt":"","tags":[{"name":"<WSL>","slug":"WSL","permalink":"http://example.com/tags/WSL/"}]},{"title":"WSL安装配置","text":"一、WSL Install WSL与虚拟机相比，资源占用更少，性能更好，启动速度快，是基于Windows内核模拟Linux系统 wsl1与wsl2相比，wsl1跨os文件系统的性能更好，但不支持docker，wsl2拥有完整的Linux内核，兼容性更好 windows10&#x2F;11专业版，查看windows版本如下：win+r，输入winver，若不符合专业版要求，请放弃 打开控制面板-&gt;程序和功能-&gt;启用或关闭Windows功能，启用Hyper-V、适用于Linux的Windows子系统、虚拟机平台，重启电脑 请注意，启用Hyper-V功能可能会导致代理端口报错，修改端口范围： netsh int ipv4 set dynamicport udp start=49152 num=16383 二、WSL Config1. 配置WSL镜像网络1234567# 将 WSL 和 发行版 版本都转换为2, 并更新内核wsl --set-default-version 2wsl --set-version Distr_Name 2wsl --update# 使用 PowerShell 配置 Windows 网卡路由规则及防火墙规则Set-NetFirewallHyperVVMSetting -Name &#x27;&#123;40E0AC32-46A5-438A-A0B2-2B479E8F2E90&#125;&#x27; -DefaultInboundAction Allow 12# 配置 windows .wslconfig文件C:\\Users\\UserName\\.wslconfig 12345678910111213[wsl2] # 默认启用设置memory=8GB # 内存分配processors=6 # 线程数量pageReporting=true # 回收未使用的内存guiApplications=true # 开启WSLGnestedVirtualization=true # 允许嵌套虚拟机vmIdleTimeout=-1 # WSL2 VM 实例空闲超时关闭时间，-1 为永不关闭networkingMode=mirrored # 启用镜像网络特性支持[experimental] # 实验性设置hostAddressLoopback=true # 启用 WSL2/WSLg 子系统和 Windows 宿主之间的本地回环互通支持autoMemoryReclaim=disabled # 空闲内存禁止/缓慢/立即释放 disabled/gradual/dropcache 使用docker需要禁止该功能，使用docker时必须禁止该功能，不然会杀后台sparseVhd=true # 启用 WSL2/WSLg 子系统虚拟硬盘空间自动回收 12# 配置 发行版 wsl.conf文件vim /etc/wsl.conf 123456789101112131415161718192021[automount]enabled=truemountFsTab=trueoptions=&quot;metadata,dmask=0022,fmask=0077,umask=0022&quot;root=/mnt/[filesystem]umask=0022[interop]enabled=trueappendWindowsPath=false # 不添加 Windows 环境变量 Path，防止路径变量污染带来的干扰# 其它网络配置[network]generateHosts=truegenerateResolvConf=true[boot]# command=/root/.start.shsystemd=true https://blog.gazer.win/essay/wsl2-mirrored-network.html/comment-page-1#comments 2.重置网络1234# WSL 中发行版的网络通用，在网卡配置出问题时候，可以选择重置 WSL 网络# 停止并重启 WSL 管理服务，重置网络net stop LxssManagernet start LxssManager","path":"2024/10/04/WSL-Install/","date":"10-04","excerpt":"","tags":[{"name":"<WSL>","slug":"WSL","permalink":"http://example.com/tags/WSL/"}]},{"title":"FRP内网穿透","text":"1.配置服务端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# 安装wget https://github.com/fatedier/frp/releases/download/v0.61.0/frp_0.61.0_linux_amd64.tar.gz# 解压tar -zxvf frp_0.61.0_linux_amd64.tar.gzmv frp_0.61.0_linux_amd64 frp# 配置frps.tomlvim frps.tomlbindAddr = &quot;0.0.0.0&quot;bindPort = 7000kcpBindPort = 7000webServer.addr = &quot;0.0.0.0&quot;webServer.port = 7500webServer.user = &quot;chen&quot;webServer.password = &quot;123456&quot;log.to = &quot;/home/ubuntu/frp/frps.log&quot;log.level = &quot;info&quot;log.maxDays = 3auth.method = &quot;token&quot;auth.token = &quot;123456&quot;allowPorts = [ &#123; start = 6000, end = 7000&#125;,]# 配置防火墙ufw allow 7000ufw allow 7500ufw status# 需要还注意修改对应服务器平台上的防火墙，添加入站规则，允许tcp7000,7500端口# 配置开机自启脚本vim /etc/systemd/system/frps.service[Unit]Description = frp serverAfter = network.target syslog.targetWants = network.target[Service]Type=simpleExecStart=/home/ubuntu/frp/frps -c /home/ubuntu/frp/frps.tomlExecStop=/bin/kill $MAINPIDRestart=alwaysRestartSec=5[Install]WantedBy=multi-user.target# 重载systemsystemctl daemon-reloadsystemctl start frpssystemctl enable frpssystemctl status frps# 后台运行nohup ./frps -c frps.toml &amp;# 停止作业ps aux | grep frpskill PID# 启用仪表盘,服务器IPhttp://&lt;IP&gt;:7500 2.配置客户端，配置 WSL2 p2p 连接作为示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 查看端口22使用情况netstat -ano | findstr :22# 如果22端口被占用，可以配置 WSL2 端口转发，以及一下的 p2p 配置需要修改为新的端口# 官方文档：https://learn.microsoft.com/zh-cn/windows/wsl/networkingnetsh interface portproxy show allnetsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=8888 connectaddress=198.18.0.1 connectport=8888# 物理机A，安装了WSL2的机子frpc.tomlserverAddr = &quot;43.163.243.245&quot;serverPort = 7000loginFailExit = truelog.to = &quot;E:/frp/frpc.log&quot;log.level = &quot;info&quot;log.maxDays = 3auth.method = &quot;token&quot;auth.token = &quot;123456&quot;[[proxies]]name = &quot;p2p_ssh&quot;type = &quot;xtcp&quot;secretKey = &quot;abcdefg&quot;localIP = &quot;127.0.0.1&quot;localPort = 22# 启用frpc -c frpc.toml# 物理机Bfrpc.tomlserverAddr = &quot;43.163.243.245&quot;serverPort = 7000loginFailExit = truelog.to = &quot;D:/frp/frpc.log&quot;log.level = &quot;info&quot;log.maxDays = 3auth.method = &quot;token&quot;auth.token = &quot;123456&quot;[[visitors]]name = &quot;p2p_ssh_visitor&quot;type = &quot;xtcp&quot;serverName = &quot;p2p_ssh&quot;secretKey = &quot;abcdefg&quot;bindAddr = &quot;127.0.0.1&quot;bindPort = 6000keepTunnelOpen = ture# 启用frpc -c frpc.toml# 测试连接ssh -p 6000 chen@198.18.0.1","path":"2024/09/22/FRP内网穿透/","date":"09-22","excerpt":"","tags":[{"name":"<远程连接>","slug":"远程连接","permalink":"http://example.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"}]},{"title":"Zerotier+Moonlight+Parsec远程连接","text":"简介123456789101112131415# 应用远程连接，轻量型办公，galgame# 工具Zerotier：创建虚拟组网Moonlight：配置流量转发节点Parsec：桌面连接工具# 注意# 需要一个流量转发节点，最好是用VPS，实在不行只能用国外服务器转发# Zerotier 是国外服务器，配置的组网也是国外的，用国内服务器转发有很大的延迟# 体验我用的是腾讯云的国外轻量服务器2h2g进行流量转发，核心、内存都跑不到一半，日常使用是够的但是连接有卡顿，是连续性轻微的卡顿，日常办公还能接受，玩游戏实在太难受了，只能galgame 1. 安装 Parsec2. 配置 Zerotier2.1 创建网络12345# 创建网络：https://my.zerotier.com/# 帮助文档：https://docs.zerotier.com/central/ 2.2 服务器配置 Zerotier1234567891011121314151617181920212223242526272829# Linux 安装客户端：curl -s https://install.zerotier.com/ | sudo bash# 加入网络zerotier-cli join &lt;Network ID&gt;# 进入 zerotier-onecd /var/lib/zerotier-one# 生成 moon.jsonzerotier-idtool initmoon identity.public &gt; moon.json# 编辑 moon.jsonvim moon.json# zerotier默认端口9993,IP为本机IP&quot;stableEndpoints&quot;: [“IP/9993”]# 生成 .moon,如：00000015efc603c7.moon,前六个零为标识码,后面接上本机 zerotierIDzerotier-idtool genmoon moon.json# 创建 moons.d 文件夹mk moons.d# 将 .moon 文件移动到 moons.d 文件夹mv 00000015efc603c7.moon moons.d# 重启服务service zerotier-one restart 2.3 客户端配置 zerotier12345678910111213141516171819202122232425262728# Windows 安装客户端：https://www.zerotier.com/# 拉取服务器上的 .moon 文件scp ubuntu@&lt;IP&gt;:/var/lib/zerotier-one/moons.d/00000015efc603c7.moon D:\\00000015efc603c7.moon# 进入 C:\\ProgramData\\ZeroTier\\One# 创建 moond.d 文件夹# 将 .moon 文件添加到 moons.d 文件夹# 重启 zerotier 服务# 服务器上查看虚拟组网zerotier-cli listpeerstest:200 listpeers &lt;ztaddr&gt; &lt;path&gt; &lt;latency&gt; &lt;version&gt; &lt;role&gt;200 listpeers 35c192ce9b 35.209.17.225/29817;15546;15546 190 1.14.1 LEAF&lt;ztaddr&gt; 用户ID&lt;path&gt; 物理IP&lt;latency&gt; 延迟&lt;version&gt; 版本&lt;role&gt; 角色只要延迟不为-1也都是说连接成功了，至于延迟就看各位的流量转发节点行不行了","path":"2024/09/18/Zerotier-Moonlight-Parsec远程连接/","date":"09-18","excerpt":"","tags":[{"name":"<Windows>","slug":"Windows","permalink":"http://example.com/tags/Windows/"},{"name":"<远程连接>","slug":"远程连接","permalink":"http://example.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"}]},{"title":"Windows常用命令","text":"文件与目录管理命令12345678910111213141516171819202122232425262728293031# 查看dir # 查看当前目录dir /a # 查看所有文件，包含隐藏文件 # 进退cd &lt;path&gt; # 进入cd # 退回cd \\ # 退回根目录D: # 切换盘符# 创建mkdir &lt;path&gt; # 创建文件夹type null &gt; &lt;path&gt; # 创建空文件echo &lt;content&gt; &gt; &lt;path&gt; # 覆盖到文件echo &lt;content&gt; &gt;&gt; &lt;path&gt; # 追加到文件# 删除rmdir # 删除空文件夹rmdir /s/q # 强制删除文件夹del # 删除文件del /f/s/q # 强制删除文件# 移动move &lt;old_path&gt; &lt;new_path&gt;# 重命名ren &lt;old_name&gt; &lt;new_name&gt;# 复制copy &lt;old_path&gt; &lt;new_path&gt; # 复制文件,也可以起到重命名的作用xcopy &lt;old_path&gt; &lt;new_path&gt; # 复制目录及其内容 系统命令1234567891011cls # 清空屏幕exit # 退出窗口systeminfo # 查看系统详细信息# 进程tasklist # 显示当前运行的所有进程taskkill /f /im &lt;PID&gt; # 强制结束进程# 关闭重启shutdown /s /f /t 60 # 60秒后关闭计算机shutdown /r /f /t 30 # 30秒后重启计算机 网络命令12345678910ping www.google.com # 测试与 Google 网站的连接ping 192.168.1.1 # 测试与局域网路由器的连接ipconfig # 查看 IP 配置ipconfig /all # 查看详细的网络配置信息ipconfig /release # 释放当前 IP 地址ipconfig /renew # 更新并获取新的 IP 地址tracert www.google.com # 跟踪到 Google 网站的路径nslookup www.google.com # 查找 Google 网站的 DNS 记录","path":"2024/09/12/Windows常用命令/","date":"09-12","excerpt":"","tags":[{"name":"<Windows>","slug":"Windows","permalink":"http://example.com/tags/Windows/"}]},{"title":"Hexo 搭建个人博客部署到 Github","text":"使用 Node 部署 Hexo官网下载 Node.js 12npm install hexo-cli -g # 安装hexo-cli客户端npm install hexo-deployer-git --save # 安装deploy-git插件，以便部署到github 初始化 Hexo 项目1234mkdir &lt;bolg_name&gt; # 创建 Hexo 项目文件夹cd &lt;bolg_name&gt; # 进入文件夹hexo init . # 构建 Hexo 框架npm install # 按照项目依赖 快速配置 Git官网下载 Git 123git config --global user.name &quot;姓名&quot;git config --global user.email &quot;邮箱&quot;ssh-keygen -t rsa -C &quot;邮箱&quot; # 三个回车默认路径：C:\\Users\\35422\\.ssh，生成git密钥和公钥 配置 Github 允许 Git 上传和拉取12345678# 添加 SSHLogin Github-&gt;Setting-&gt;SSH and GPG keys-&gt;New SSH key# 查看 Git 公钥cat C:\\Users\\35422\\.ssh\\id_rsa.pub # 添加 Git 公钥将Git生成的公钥粘贴上-&gt;Add SSH key 配置 _config.yml12345678# 创建 Github 代码仓库Create a new repository-&gt;Repository name-&gt;Create repository # 注意项目名需要与用户名一致# 配置远程仓库deploy: type: git # 注意空格 repository: &lt;SSH key&gt; # 仓库-&gt;Code-&gt;Code-&gt;Local-&gt;SSH 复制粘贴 branch: main # 注意分支名称，旧版的是master 常用命令1234hexo generate /hexo g # 生成静态文件hexo server /hexo s # 本地启用 http://localhost:4000hexo deploy /hexo d # 上传博客 需要配置文件 _config.yml 中的 deployhexo clean /hexo c # 清理缓存","path":"2024/09/08/Hexo-Install-Guide/","date":"09-08","excerpt":"","tags":[{"name":"<Hexo>","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo Command","text":"1234567891011121314151617# bashhexo version # 查看版本hexo init &lt;name&gt; # 初始化框架hexo config # 修改配置hexo server -p &lt;port&gt; # 指定端口启用，默认端口: 4000# post and pagehexo list # 查看hexo new post &quot;新的文章&quot; # 创建文章hexo new page &quot;新的页面&quot; # 创建页面hexo rename &lt;new_name&gt; &lt;old_name&gt;# generatehexo generate /hexo g # 生成静态文件hexo server /hexo s # 本地启用 http://localhost:4000hexo deploy /hexo d # 上传博客 需要配置文件 _config.yml 中的 deployhexo clean /hexo c # 清理缓存","path":"2024/09/08/Hexo Command/","date":"09-08","excerpt":"","tags":[{"name":"<Hexo>","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}],"categories":[],"tags":[{"name":"<Linux>","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"<Docker>","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"<Oracle>","slug":"Oracle","permalink":"http://example.com/tags/Oracle/"},{"name":"<Mysql>","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"},{"name":"<远程连接>","slug":"远程连接","permalink":"http://example.com/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"},{"name":"<WSL>","slug":"WSL","permalink":"http://example.com/tags/WSL/"},{"name":"<Windows>","slug":"Windows","permalink":"http://example.com/tags/Windows/"},{"name":"<Hexo>","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}